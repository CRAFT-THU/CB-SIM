#ifndef _STAGE_LINEAR_${layer_num}
#define _STAGE_LINEAR_${layer_num}

#include "${crossbar_file}"
#include "systemc.h"

using namespace std;

SC_MODULE(stage_linear_${layer_num}) {
	sc_in<float> input[${input_size}];
	sc_out<float> output[${output_size}];
	sc_in<int> signal_in;
	sc_out<int> signal_out;

	CROSSBAR cb;

	// read crossbar data from file
	void init_crossbar() {
		float* cell = new float[CROSSBAR_L*CROSSBAR_W];
		string filename = "./weights/weight_${layer_num}.csv";
		ifstream inFile_x(filename.c_str(), ios::in);
		for (int i = 0; i < CROSSBAR_L; i++) {
			string lineStr_x;
			getline(inFile_x, lineStr_x); // read one row data
			stringstream ss(lineStr_x);
			string str;
			for (int j = 0; j < CROSSBAR_W; j++) {
				// cell[i*CROSSBAR_W + j] = i * CROSSBAR_W + j;
				getline(ss, str, ',');
				istringstream iss(str);
				float num;
				iss >> num;
				cell[i*CROSSBAR_W + j] = num;
			}
		}
		cb.init(cell, 1, CROSSBAR_L, CROSSBAR_W);
		delete[] cell;
		cout << "load weights ${layer_num} complete. "  << filename << endl;
	}

	// activation function default relu
	void activation(float tmp_input[]) {
		for (int i = 0; i < ${output_size}; i++)
			if (tmp_input[i] < 0.0)
				tmp_input[i] = 0.0;
	}

	// run matrix multiply
	void stage_linear_run() {
		/*
		int input_buff[${input_size}] = { 0 };
		float _max = 0.0;
		for (int i = 0; i < ${input_size}; ++i){
			input_buff[i] = int(input[i].read());
			if (input_buff[i] > _max)
				_max = input_buff[i];
		}

		// for movement
		int move = 0;
		for (int i = 0; i < DA_WIDTH; ++i){
			move += int(pow(2, double(i)));
		}

		// scale input
		int n = 0;
		while (pow(2, double(n)) < _max)
			n++;
		if (n > AD_WIDTH){
			float para = pow(2, AD_WIDTH-n);
			for (int i = 0; i < ${input_size}; ++i){
				input_buff[i] = int(float(input_buff[i]) / para);
			}
		}

		// DA->XB->AD
		da dac(DA_V);
		ad adc(AD_V);
		float ad_buff[CROSSBAR_W] = { 0.0 };
		for (int i = 0; i < AD_WIDTH/DA_WIDTH; ++i){
			float tmp_input[CROSSBAR_L] = { 0.0 };
			float tmp_output[CROSSBAR_W] = { 0.0 };
			// lower da_width bits
			for (int j = 0; j < ${input_size}; ++j){
				int bitnum = static_cast<int>(input_buff[j] & move);
				dac.trans(bitnum, DA_WIDTH);
				tmp_input[CROSSBAR_L - ${input_size} + j] = float(bitnum);
				input_buff[j] = input_buff[j] >> DA_WIDTH;
			}
			cb.run(tmp_input, tmp_output);
			// ad and shift add
			for (int j = 0; j < CROSSBAR_W; ++j){
				float tmp = tmp_output[j] / XB${layer_num}_I;
				if (tmp > 1)
					adc.trans(1.0);
				else {
					adc.trans(tmp);
				}
				// float tmp = adc.AD_out / (XB${layer_num}_I * 0.15); // divide by xb_i?
				// tmp = (tmp > 0)? floor(tmp+0.5): ceil(tmp-0.5);
				// int res = 0;
				// if (tmp > 1)
				// 	res = int(pow(2, AD_WIDTH));
				// else 
				// 	res = int(tmp * pow(2, AD_WIDTH));
				ad_buff[j] = (adc.AD_out) * pow(2, i) + ad_buff[j];
				// ad_buff[j] = (ad_buff[j] > 0)? ad_buff[j]: 0;
			}
		}

		// for (int i = 0; i < ${input_size}; ++i)
		// {
		// 	if (ad_buff[i] >= pow(2, 13))
		// 		ad_buff[i] = 255;
		// 	else
		// 		ad_buff[i] = (int(ad_buff[i] / 16.0) & 255);
		// }
		activation(ad_buff);
		for (int i = 0; i < ${output_size}; i++) {
			output[i].write(ad_buff[i]);
		}
		*/
		float tmp_input[CROSSBAR_L] = { 0.0 };
		float tmp_output[CROSSBAR_W] = { 0.0 };
		// read data from former layer
		for (int i = 0; i < ${input_size}; i++) {
			tmp_input[CROSSBAR_L-${input_size}+i] = input[i].read();
		}
		cb.run(tmp_input, tmp_output, false);
		activation(tmp_output);
		for (int i = 0; i < ${output_size}; i++) {
			output[i].write(tmp_output[i]);
		}

		signal_out.write(signal_in.read());
	}

	SC_CTOR(stage_linear_${layer_num}) {
		init_crossbar();

		SC_METHOD(stage_linear_run);
		sensitive << signal_in;
		dont_initialize();
	}

	~stage_linear_${layer_num}() {
		cb.free_space();
	}
};

#endif // !_STAGE_LINEAR_${layer_num}
